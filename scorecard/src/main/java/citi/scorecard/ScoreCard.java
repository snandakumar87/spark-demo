package citi.scorecard;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class ScoreCard implements java.io.Serializable
{

   static final long serialVersionUID = 1L;

   private java.lang.String accountId;
   private int segmentId;
   private java.util.Date processDate;
   private double finalScore;
   private double segmentConstant;

   private java.util.Map<java.lang.String, java.lang.Double> valueC = new java.util.HashMap<java.lang.String, java.lang.Double>();
   private java.util.Map<java.lang.String, java.lang.Double> ValueA = new java.util.HashMap<java.lang.String, java.lang.Double>();
   private java.util.Map<java.lang.String, citi.scorecard.ScoreReasonCode> valueDiff = new java.util.HashMap<java.lang.String, citi.scorecard.ScoreReasonCode>();
   private java.util.Map<java.lang.String, java.lang.Double> valueX = new java.util.HashMap<java.lang.String, java.lang.Double>();
   private java.util.List<citi.scorecard.ScoreFormula> params;

   private java.lang.String resonCode;

   public ScoreCard()
   {
   }

   public java.lang.String getAccountId()
   {
      return this.accountId;
   }

   public void setAccountId(java.lang.String accountId)
   {
      this.accountId = accountId;
   }

   public int getSegmentId()
   {
      return this.segmentId;
   }

   public void setSegmentId(int segmentId)
   {
      this.segmentId = segmentId;
   }

   public java.util.Date getProcessDate()
   {
      return this.processDate;
   }

   public void setProcessDate(java.util.Date processDate)
   {
      this.processDate = processDate;
   }

   public double getFinalScore()
   {
      return this.finalScore;
   }

   public void setFinalScore(double finalScore)
   {
      this.finalScore = finalScore;
   }

   public double getSegmentConstant()
   {
      return this.segmentConstant;
   }

   public void setSegmentConstant(double segmentConstant)
   {
      this.segmentConstant = segmentConstant;
   }

   public java.util.List<citi.scorecard.ScoreFormula> getParams()
   {
      return params;
   }

   public void setParams(java.util.List<citi.scorecard.ScoreFormula> params)
   {
      this.params = params;
   }

   public java.util.Map<java.lang.String, citi.scorecard.ScoreReasonCode> getValueDiff()
   {
      return valueDiff;
   }

   public void setValueDiff(java.util.Map<java.lang.String, citi.scorecard.ScoreReasonCode> valueDiff)
   {
      this.valueDiff = valueDiff;
   }

   public java.util.Map<java.lang.String, java.lang.Double> getValueC()
   {
      return valueC;
   }

   public void setValueC(java.util.Map<java.lang.String, java.lang.Double> valueC)
   {
      this.valueC = valueC;
   }

   public java.util.Map<java.lang.String, java.lang.Double> getValueX()
   {
      return valueX;
   }

   public void setValueX(java.util.Map<java.lang.String, java.lang.Double> valueX)
   {
      this.valueX = valueX;
   }

   public java.util.Map<java.lang.String, java.lang.Double> getValueA()
   {
      return ValueA;
   }

   public void setValueA(java.util.Map<java.lang.String, java.lang.Double> valueA)
   {
      ValueA = valueA;
   }

   public double calculateResaonCode()
   {

      // not yet sorted
      java.util.List<citi.scorecard.ScoreReasonCode> resoncodes = new java.util.ArrayList<citi.scorecard.ScoreReasonCode>(this.valueDiff.values());

      java.util.Collections.sort(resoncodes, new java.util.Comparator<ScoreReasonCode>()
      {
         public int compare(citi.scorecard.ScoreReasonCode o1, citi.scorecard.ScoreReasonCode o2)
         {
            return (int) (o1.getCalcualedValue() - o2.getCalcualedValue());
         }
      });

      for (citi.scorecard.ScoreReasonCode p : resoncodes)
      {
         System.out.println("reason code : value " + p);
      }

      return 0;
   }

   public double calculateScore()
   {

      java.util.Set<String> mapSet = (java.util.Set) this.ValueA.entrySet();
      java.util.Iterator mapIterator = mapSet.iterator();
      double sum = 0.00;

      while (mapIterator.hasNext())
      {
         java.util.Map.Entry mapEntry = (java.util.Map.Entry) mapIterator.next();
         java.lang.String keyValue = (java.lang.String) mapEntry.getKey();
         java.lang.Double value = (java.lang.Double) mapEntry.getValue();
         sum = sum + value.doubleValue();
        // System.out.println("Score card X calcualtion for the Formula Key --> " + keyValue + " and value --> " + value.doubleValue());
      }
      // System.out.println(" sum - " +  sum);
      double alpha = sum + this.segmentConstant;

      double exp = Math.exp(alpha);
      double exp1 = 1 + exp;
      double probc = exp / exp1;
      double finalscorevalue = 1000 * probc;

      java.math.BigDecimal bdfinalScore = new java.math.BigDecimal(finalscorevalue).setScale(2, java.math.RoundingMode.HALF_EVEN);
      this.finalScore = bdfinalScore.doubleValue();
      return bdfinalScore.doubleValue();
   }

   public java.lang.String getResonCode()
   {
      return this.resonCode;
   }

   public void setResonCode(java.lang.String resonCode)
   {
      this.resonCode = resonCode;
   }

   

   public ScoreCard(java.lang.String accountId, int segmentId,
         java.util.Date processDate, double finalScore, double segmentConstant,
         java.util.List<citi.scorecard.ScoreFormula> params,
         java.lang.String resonCode)
   {
      this.accountId = accountId;
      this.segmentId = segmentId;
      this.processDate = processDate;
      this.finalScore = finalScore;
      this.segmentConstant = segmentConstant;
      this.params = params;
      this.resonCode = resonCode;
   }
   
   @Override
	public String toString() {
		return "ScoreCard [accountId=" + accountId + ", segmentId=" + segmentId + ", processDate=" + processDate
				+ ", finalScore=" + finalScore + ", segmentConstant=" + segmentConstant + ", resonCode=" + resonCode
				+ ", valueC=" + valueC + ", ValueA=" + ValueA + ", valueDiff=" + valueDiff + ", valueX=" + valueX
				+ ", params=" + params + "]";
	}
}